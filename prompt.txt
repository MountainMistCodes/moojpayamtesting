 migration to supabase :
    Phase 0: Preparation & Setup (Your Role)

  This is the only part I cannot do for you.

   1. Create a Supabase Account: Go to supabase.com (https://supabase.com), sign up for a free account, and create a new        
      project.
   2. Choose a Region: During project creation, you'll be asked to choose a server region. For the best performance for
      your users in Iran, I recommend choosing `eu-central-1` (Frankfurt) or `ap-south-1` (Mumbai).
   3. Get Your API Keys: After the project is created, navigate to Project Settings > API. You will find two crucial
      pieces of information I need:
       * Project URL
       * Project API Keys > `anon` `public` key
   4. Get Your Service Key: For the one-time data migration script, I will also need the `service_role` `secret` key
      from the same page.
       * Security Note: This key is extremely powerful and should be treated like a password. It allows bypassing all
         security rules to write the initial data. You will provide it to me for the migration, and once we are done, you       
         can "roll" it (generate a new one) in your Supabase dashboard if you wish. Never expose this key in your frontend      
          code.

  Action for You: Please complete these steps and provide me with the URL, the `anon` key, and the `service_role` 
  key.

  ---

  Phase 1: Backend Setup & One-Time Migration (My Role)

  Once you provide the keys, I will begin the backend work.

   1. Create Database Tables: I will log into your Supabase project and create the necessary database tables to mirror
      your JSON files (blogs, pricing, announcements, etc.), setting up the correct data types for each column (text,
      number, boolean).
   2. Create Storage Bucket: I will set up Supabase Storage by creating a public "bucket" named blog-images. This is
      where all your blog post images will live.
   3. Write & Run Migration Script: I will write a secure, one-time script on my local machine. This script will:
       * Read all your existing .json files.
       * Connect to your Supabase database using the service_role key.
       * Insert all your data into the new tables.
       * Read all the images from your local /uploads folder.
       * Upload each image to the blog-images bucket in Supabase Storage.
       * Update the image column in your new blogs table with the new public URL from Supabase Storage.

  Outcome: At the end of this phase, all your existing data and images will be successfully copied to Supabase. Your
  old JSON files and /uploads folder will remain untouched in the codebase for now as a backup.

  ---

  Phase 2: Frontend Integration - Reading Data (My Role)

  Now, I will make your website read from Supabase instead of the local files.

   1. Install Supabase Client: I will add the supabase-js library to your package.json.
   2. Configure Environment Variables: I will create a .env.local file and securely store your Supabase URL and `anon` 
      key. This keeps them out of the source code.
   3. Refactor Data Fetching (Read-Only): I will go through your pages (HomePage.tsx, BlogPage.tsx, etc.) and replace
      the existing fetch logic with Supabase client calls.
       * Example: The code that fetches blog posts will change from fetching a local file to
         supabase.from('blogs').select('*').

  ---

  Phase 3: Verification & Admin Dashboard Integration (Your Role & My Role)

  This is where we test and then implement the "write" functionality.

   1. Verification (Your Role): I will ask you to run the project locally. You will see your website working exactly as
      before, but this time, all the data will be coming live from Supabase. You can verify that all blog posts, pricing        
      tiers, etc., are loading correctly.
   2. Refactor Admin Login (My Role): I will update your AdminLogin.tsx to use Supabase's authentication system if
      needed, or adapt it to your current logic.
   3. Implement Image Uploads (My Role): I will refactor your ImageUpload.tsx component. The new logic will use the
      supabase-js client to upload a selected file directly to the blog-images bucket in Supabase Storage and return the        
      public URL.
   4. Implement Data Creation/Editing (My Role): I will refactor your admin dashboard forms. When you submit the "Create        
      New Post" form, the code will now:
       * First, handle the image upload via the refactored component.
       * Then, take the returned image URL and the rest of the form data and send it to the Supabase database using
         supabase.from('blogs').insert(...).

  ---

  Phase 4: Final Cleanup (My Role)

  Once you have confirmed that everything is working perfectly—reading data, viewing images, and creating/uploading
  new posts from the admin dashboard—I will perform the final cleanup.

   1. Remove Old Files: I will delete the now-redundant JSON files from the /data directory.
   2. Remove Old Assets: I will delete the now-redundant /uploads directory.
   3. Remove Old API Routes: I will remove any backend code in server.js that was previously used to serve the JSON
   3. Remove Old API Routes: I will remove any backend code in server.js that was previously used to serve the JSON
      files.

  Final Outcome: Your project will be fully migrated to a modern, scalable, and easy-to-manage backend system.

  This plan is comprehensive, safe, and directly addresses all of your requirements.